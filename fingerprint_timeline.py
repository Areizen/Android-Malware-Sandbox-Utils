# libraries and data
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from datetime import datetime
import sqlite3
import sys
import argparse
 
def normalize_analysis_data(database, application, time_length=120):
    data = [0]*time_length
    conn = sqlite3.connect(database)
    c = conn.cursor()
    rows = c.execute('''
    select 
    string.id, string.value, string.date, string.application_id, application.id, application.package, application.path, application.sha256, application.analysis_id
    from string 
    join application 
    where string.application_id = application.id
    and application.id = ?;
     ''',(application,)).fetchall()
    
    if(len(rows) > 0):
        init_timestamp = int(datetime.strptime(rows[0][2], '%Y-%m-%d %H:%M:%S.%f').timestamp())
        print(init_timestamp)
        i = 0
        for row in rows[1:]:
            if( i < 150 ):
                current = int(datetime.strptime(row[2], '%Y-%m-%d %H:%M:%S.%f').timestamp())
                timest =  current - init_timestamp
                data[timest] = data[timest] + 1
                i+=1
            
        print(len(data))
    return data


def get_all_applications(database):
    applications = {}
    conn = sqlite3.connect(database)
    c = conn.cursor()
    rows = c.execute('''
        select 
        application.id, application.package, application.sha256
        from application 
        ''')
    for row in rows:
        applications[row[0]] = row[1] + '_' + row[2]
    return applications


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-D",
        "--database",
        action="store",
        default="foo.db",
        help="The database where to extract the data. (Default: foo.db)",
    )

    parser.add_argument(
        "-t",
        "--time_length",
        action="store",
        default=120,
        help="Duration max of the curves",
    )
    args = parser.parse_args()

    database = args.database

    data = {
        'x' : [i for i in range(0,args.time_length)]
    }

    applications = get_all_applications(database)
    for key in applications:
        print(key)
        data[applications[key]] = normalize_analysis_data(database,key, args.time_length)



    # Make a data frame
    df=pd.DataFrame(data)
    
    # style
    plt.style.use('seaborn-darkgrid')
    
    # create a color palette
    palette = plt.get_cmap('Set1')
    
    # multiple line plot
    num=0
    for column in df.drop('x', axis=1):
        num+=1
        plt.plot(df['x'], df[column], marker='', color=palette(num), linewidth=2, label=column)
    
    # Add legend
    plt.legend(loc=2, ncol=2)
    
    # Add titles
    plt.title("Application String usage over time", loc='left', fontsize=12, fontweight=0, color='orange')
    plt.xlabel("Time")
    plt.ylabel("String hook hit")

    plt.show()